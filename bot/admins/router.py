from typing import Dict

from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import CallbackQuery
from loguru import logger

import bot.application_form.dao
from bot.admins.keyboards.inline_kb import approve_admin_keyboard
from bot.application_form.dao import ApplicationDAO
from bot.application_form.models import Application, ApplicationStatus
from bot.config import bot
from bot.database import connection

admin_router = Router()


@admin_router.callback_query(F.data.startswith("approve_admin_"))
@connection()
async def admin_application_callback(call: CallbackQuery, session) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ callback-–∑–∞–ø—Ä–æ—Å–∞.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Raises:
        TelegramBadRequest: –û—à–∏–±–∫–∞ Telegram, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ.
        Exception: –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    try:
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback-–∑–∞–ø—Ä–æ—Å–∞
        approve_inf, user_id_str, application_id_str = call.data.replace(
            "approve_admin_", ""
        ).split("_")
        user_id: int = int(user_id_str)
        application_id: int = int(application_id_str)
        approve: bool = approve_inf == "True"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        new_status = ApplicationStatus("–ü—Ä–∏–Ω—è—Ç–æ" if approve else "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        await ApplicationDAO.update(
            session=session,
            filters={"id": application_id},
            values={"status": new_status},
        )

        application: Application = await ApplicationDAO.find_one_or_none_by_id(
            data_id=application_id, session=session
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        status_icon = "üü¢" if approve else "üî¥"
        response_message = (
            f"–ó–∞—è–≤–∫–∞ ‚Ññ {application_id}\n\n"
            f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status_icon} {new_status.value}\n\n"
        )

        if application.owner is not None:
            response_message += (
                "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –î–ê\n\n"
                if application.owner
                else "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
            )
        if not application.owner and application.can_contact is not None:
            response_message += (
                "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –î–ê\n\n"
                if application.can_contact
                else "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
            )
        if application.text_application:
            response_message += f"–í–∞—à –≤–æ–ø—Ä–æ—Å:\n{application.text_application}\n\n"
        if application.debts:
            response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
            for debt in application.debts:
                response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"
        response_message += f"\n\n <b>{application.user.phone_number}</b> \n\n"
        response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        admin_message_ids: Dict[int, int] = application.admin_message_ids
        if admin_message_ids:
            for admin_id, msg_id in admin_message_ids.items():
                try:
                    await bot.edit_message_text(
                        chat_id=admin_id,
                        message_id=msg_id,
                        text=response_message,
                        reply_markup=approve_admin_keyboard(
                            "–ë–µ—Ä–µ–º", "–û—Ç–∫–∞–∑", user_id, application_id
                        ),
                    )
                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∞ {admin_id}: {e}"
                    )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        await bot.send_message(
            chat_id=user_id,
            text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ {application_id} –ø–æ–º–µ–Ω—è–ªc—è –Ω–∞ {status_icon} {new_status.value}",
        )

    except TelegramBadRequest:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–æ–º: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
