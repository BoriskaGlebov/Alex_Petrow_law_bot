from aiogram import F
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher.router import Router

import bot.application_form.dao
from bot.admins.keyboards.inline_kb import approve_admin_keyboard
from bot.application_form.dao import ApplicationDAO
from bot.application_form.models import ApplicationStatus
from bot.config import bot, settings
from bot.database import connection

admin_router = Router()


@admin_router.callback_query(F.data.startswith('approve_admin_'))
@connection()
async def admin_application_callback(call: CallbackQuery, session) -> None:
    """

    """
    try:
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        approve_inf = call.data.replace('approve_admin_', '').split('_')
        user_id = int(approve_inf[1])
        print(user_id)
        application_id = int(approve_inf[2])
        print(application_id)
        approve_inf = approve_inf[0]
        print(approve_inf)
        approve_inf = True if approve_inf == "True" else False
        # await call.message.edit_reply_markup(reply_markup=None)
        if approve_inf:
            await ApplicationDAO.update(session=session, filters={'id': application_id},
                                        values={'status': ApplicationStatus("approved")})
            application = await ApplicationDAO.find_one_or_none_by_id(data_id=application_id, session=session)
            response_message: str = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {application_id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü¢ {application.status.value}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if application.debts:
                response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                for debt in application.debts:
                    response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"

            response_message += f"\n\n <b>{application.user.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            await call.message.edit_text(response_message,
                                         reply_markup=approve_admin_keyboard('–ë–µ—Ä–µ–º', '–û—Ç–∫–∞–∑', user_id, application_id))
            await bot.send_message(chat_id=call.from_user.id,
                                   text="–í–æ—Ç —Ç—ã —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω –∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏—á–µ–≥–æ")
            await bot.send_message(chat_id=user_id,
                                   text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–º–µ–Ω—è–ªc—è –Ω–∞ üü¢ {application.status.value} - –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É ")
        else:
            await ApplicationDAO.update(session=session, filters={'id': application_id},
                                        values={'status': ApplicationStatus("rejected")})
            application = await ApplicationDAO.find_one_or_none_by_id(data_id=application_id, session=session)
            response_message: str = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {application_id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üî¥ {application.status.value} - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if application.debts:
                response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                for debt in application.debts:
                    response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"
            response_message += f"\n\n <b>{application.user.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            await call.message.edit_text(response_message,
                                         reply_markup=approve_admin_keyboard('–ë–µ—Ä–µ–º', '–û—Ç–∫–∞–∑', user_id, application_id))
            await bot.send_message(chat_id=call.from_user.id,
                                   text="–í–æ—Ç —Ç—ã —á—Ç–æ—Ç–æ –≤—ã–±—Ä–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω –∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏—á–µ–≥–æ")
            await bot.send_message(chat_id=user_id, text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–º–µ–Ω—è–ªc—è –Ω–∞ üî¥ {application.status.value} ")

    except TelegramBadRequest:
        # –≠—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ)
        pass
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
