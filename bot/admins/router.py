import asyncio
from typing import Optional

from aiogram import F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandObject, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.chat_action import ChatActionSender
from loguru import logger
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher.router import Router

import bot.application_form.dao
from bot.admins.keyboards.inline_kb import approve_admin_keyboard
from bot.application_form.dao import ApplicationDAO
from bot.application_form.models import ApplicationStatus
from bot.config import bot, settings
from bot.database import connection
from bot.users.dao import UserDAO
from bot.users.keyboards.inline_kb import approve_keyboard
from bot.users.keyboards.markup_kb import main_kb
from bot.users.schemas import TelegramIDModel, UserModel
from bot.users.utils import get_refer_id_or_none

admin_router = Router()


@admin_router.callback_query(F.data.startswith('approve_admin_'))
@connection()
async def admin_application_callback(call: CallbackQuery, session) -> None:
    """

    """
    try:
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        approve_inf = call.data.replace('approve_admin_', '').split('_')
        user_id = int(approve_inf[1])
        print(user_id)
        application_id = int(approve_inf[2])
        print(application_id)
        approve_inf = approve_inf[0]
        print(approve_inf)
        approve_inf = True if approve_inf == "True" else False
        # await call.message.edit_reply_markup(reply_markup=None)
        if approve_inf:
            await ApplicationDAO.update(session=session, filters={'id': application_id},
                                        values={'status': ApplicationStatus("approved")})
            application = await ApplicationDAO.find_one_or_none_by_id(data_id=application_id, session=session)
            response_message: str = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {application_id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü¢ {application.status.value}\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if application.debts:
                response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                for debt in application.debts:
                    response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"

            response_message += f"\n\n <b>{application.user.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            await call.message.edit_text(response_message,
                                         reply_markup=approve_admin_keyboard('–ë–µ—Ä–µ–º', '–û—Ç–∫–∞–∑', user_id, application_id))
            await bot.send_message(chat_id=call.from_user.id,
                                   text="–í–æ—Ç —Ç—ã —á—Ç–æ—Ç–æ –≤—ã–±—Ä–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω –∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏—á–µ–≥–æ")
            await bot.send_message(chat_id=user_id,
                                   text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–º–µ–Ω—è–ªc—è –Ω–∞ üü¢ {application.status.value} - –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É ")
        else:
            await ApplicationDAO.update(session=session, filters={'id': application_id},
                                        values={'status': ApplicationStatus("rejected")})
            application = await ApplicationDAO.find_one_or_none_by_id(data_id=application_id, session=session)
            response_message: str = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {application_id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üî¥ {application.status.value} - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if application.debts:
                response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                for debt in application.debts:
                    response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"
            response_message += f"\n\n <b>{application.user.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            await call.message.edit_text(response_message,
                                         reply_markup=approve_admin_keyboard('–ë–µ—Ä–µ–º', '–û—Ç–∫–∞–∑', user_id, application_id))
            await bot.send_message(chat_id=call.from_user.id,
                                   text="–í–æ—Ç —Ç—ã —á—Ç–æ—Ç–æ –≤—ã–±—Ä–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω –∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∏—á–µ–≥–æ")
            await bot.send_message(chat_id=user_id, text=f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–æ–º–µ–Ω—è–ªc—è –Ω–∞ üî¥ {application.status.value} ")

    except TelegramBadRequest:
        # –≠—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–ª—Å—è —Ç–∞–∫–∏–º –∂–µ)
        pass
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

#
# @user_router.callback_query(F.data.startswith('approve_'), CheckForm.resident)
# async def resident_callback(call: CallbackQuery, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
#     –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–µ –≤ –∞–Ω–∫–µ—Ç–µ.
#     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–ª–æ–≥–æ–≤—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–∏, –µ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é,
#     –∏–Ω–∞—á–µ –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.
#
#     Args:
#         call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.
#
#     Returns:
#         None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#     """
#     try:
#         await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
#         approve_inf = call.data.replace('approve_', '')
#         approve_inf = True if approve_inf == "True" else False
#         await call.message.delete()
#         if approve_inf:
#             await state.update_data(age=approve_inf)
#             async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
#                 await asyncio.sleep(2)
#                 await bot.send_message(chat_id=call.message.chat.id,
#                                        text='–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üëá',
#                                        reply_markup=main_kb())
#                 await state.clear()
#         else:
#             await state.clear()
#             await bot.send_message(chat_id=call.message.chat.id,
#                                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã üßë‚Äçüéì –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.")
#
#     except Exception as e:
#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# @user_router.message(F.text, CheckForm.age)
# @user_router.message(F.text, CheckForm.resident)
# async def mistakes_handler(message: Message, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.
#
#     –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
#     –ë–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.
#
#     Args:
#         message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ —Ç–µ–∫—Å—Ç.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.
#
#     Returns:
#         None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É.
#     """
#     try:
#         await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ üëÜ")
#
#     except Exception as e:
#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
