import asyncio

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.chat_action import ChatActionSender
from loguru import logger
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.dispatcher.router import Router

import bot.application_form.dao
from bot.admins.keyboards.inline_kb import approve_admin_keyboard
from bot.application_form.models import Application
from bot.config import bot, settings
from bot.database import connection
from bot.users.dao import UserDAO
from bot.users.keyboards.inline_kb import approve_keyboard
from bot.users.keyboards.markup_kb import main_kb
from bot.users.schemas import TelegramIDModel
from bot.application_form.dao import ApplicationDAO

other_router = Router()


class OtherHandler(StatesGroup):
    other_question = State()
    approve_form = State()


@other_router.message(F.text, OtherHandler.other_question)
@connection()
async def other_question_message(message: Message, session, state: FSMContext, **kwargs) -> None:
    """

    """
    try:
        user_id: int = message.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_info = await UserDAO.find_one_or_none(session=session,
                                                   filters=TelegramIDModel(telegram_id=user_id))
        application_model = Application(user_id=user_info.id, text_application=message.text)
        application: Application = await ApplicationDAO.add(session=session, values=application_model.to_dict())
        logger.debug(f"–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É - {application.id}")
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        response_message: str = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {application.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. \n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü° {application.status.value}\n\n"

        response_message += (f"–í–∞—à–∞ –≤–æ–ø—Ä–æ—Å:\n"
                             f"{application.text_application}")

        response_message += "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"

        await message.answer(response_message, reply_markup=approve_keyboard("–î–ê", "–ù–ï–¢, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."))

        await state.set_state(OtherHandler.approve_form)

        logger.info(f"–ó–∞—è–≤–∫–∞ {application.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")


@other_router.callback_query(F.data.startswith('approve_'), OtherHandler.approve_form)
@connection()
async def approve_form_callback(
        call: CallbackQuery,
        state: FSMContext,
        session
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–¥–æ–±—Ä—è—é—â–µ–≥–æ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ª–∏–±–æ –æ–¥–æ–±—Ä–µ–Ω–∞, –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Finite State Machine (FSM) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å DAO.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥.
    """
    try:
        admin_message_ids = {}
        # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–∞
        approve_form_inf: bool = call.data.replace('approve_', '') == "True"

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await call.message.edit_reply_markup(reply_markup=None)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
        user_id = TelegramIDModel(telegram_id=call.from_user.id)
        user_applications = await UserDAO.find_one_or_none(session=session, filters=user_id)

        if not user_applications or not user_applications.applications:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        last_appl: Application = user_applications.applications[-1]

        if approve_form_inf:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–µ
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
            async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
                await asyncio.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text='–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.',
                    reply_markup=ReplyKeyboardRemove()
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(
                chat_id=settings.ADMIN_IDS[0],
                text=f'–ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {last_appl.id}, –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞',
                reply_markup=ReplyKeyboardRemove()
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                for admin_id in settings.ADMIN_IDS:
                    await bot.send_message(
                        chat_id=admin_id,
                        text=f'–ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {last_appl.id}, –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞',
                        reply_markup=ReplyKeyboardRemove()
                    )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
                pass

            response_message: str = (
                f"–ó–∞—è–≤–∫–∞ ‚Ññ {last_appl.id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü° {last_appl.status.value}\n\n"
            )

            response_message += (f"–í–∞—à–∞ –≤–æ–ø—Ä–æ—Å:\n"
                                 f"{last_appl.text_application}")
            response_message += f"\n\n <b>{user_applications.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                for admin_id in settings.ADMIN_IDS:
                    message = await bot.send_message(chat_id=admin_id,
                                                     text=response_message,
                                                     reply_markup=approve_admin_keyboard("–ë–µ—Ä–µ–º", "–û—Ç–∫–∞–∑",
                                                                                         call.from_user.id,
                                                                                         last_appl.id))
                    admin_message_ids[admin_id] = message.message_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id

                await ApplicationDAO.update(
                    session=session,
                    filters={"id": last_appl.id},
                    values={"admin_message_ids": admin_message_ids}
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")
                pass

        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏, —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await state.clear()
            await ApplicationDAO.delete(session=session, filters=last_appl.to_dict())
            await bot.send_message(
                chat_id=call.message.chat.id,
                text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É",
                reply_markup=main_kb()  # –í–æ–∑–º–æ–∂–Ω–æ, –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# @user_router.message(lambda message: message.contact is not None)
# @connection()
# async def handle_contact(message: Message, state: FSMContext, session) -> None:
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
#     Args:
#         message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
#     """
#     contact = message.contact
#     user_id = message.from_user.id
#     phone_number = contact.phone_number
#     phone_number = normalize_phone_number(phone_number)
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –ë–î
#     existing_user = await UserDAO.find_one_or_none(filters=TelegramIDModel(telegram_id=user_id), session=session)
#
#     if existing_user:
#         await UserDAO.update(filters=TelegramIDModel(telegram_id=user_id),
#                              values=UpdateNumberSchema(phone_number=phone_number), session=session)
#     else:
#         return
#
#         # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#
#     async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
#         await asyncio.sleep(2)
#         await message.answer(
#             f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
#             reply_markup=ReplyKeyboardRemove()
#         )
#         msg4 = f"–í–∞–º —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å üîû 18 –ª–µ—Ç? "
#         await message.answer(msg4, reply_markup=approve_keyboard("–î–∞", "–ù–µ—Ç"))
#         await state.set_state(CheckForm.age)


#
# @dp.message(lambda message: message.contact is None)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
# async def handle_manual_phone(message: Message) -> None:
#     """
#     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é.
#
#     Args:
#         message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#     """
#     user_id = message.from_user.id
#     phone_number = message.text.strip()
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É
#     if not PHONE_REGEX.match(phone_number):
#         await message.answer(
#             "–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX."
#         )
#         return
#
#     # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –ë–î
#     existing_user = await UserDAO.find_one_or_none(filters=TelegramIDModel(telegram_id=user_id))
#
#     if existing_user:
#         await UserDAO.update(filters={"telegram_id": user_id}, values={"phone_number": phone_number})
#     else:
#         return
#
#     # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
#     await message.answer(
#         f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {phone_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
#         reply_markup=ReplyKeyboardRemove()
#     )

#
# @user_router.callback_query(F.data.startswith('approve_'), CheckForm.age)
# async def age_callback(call: CallbackQuery, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
#     –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –≤ –∞–Ω–∫–µ—Ç–µ.
#     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, —á—Ç–æ –µ–º—É –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç, –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
#     –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ
#     –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏.
#
#     Args:
#         call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.
#
#     Returns:
#         None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#     """
#     try:
#         await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
#
#         approve_inf = call.data.replace('approve_', '')
#         approve_inf = True if approve_inf == "True" else False
#         await call.message.delete()
#         # # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ
#         # await call.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ...")
#         # await call.message.edit_reply_markup(reply_markup=None)
#         if approve_inf:
#             await state.update_data(age=approve_inf)
#             async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
#                 await asyncio.sleep(2)
#                 await bot.send_message(chat_id=call.message.chat.id,
#                                        text='–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∞–ª–æ–≥–æ–≤—ã–º —Ä–µ–∑–∏—Ç–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?üá∑üá∫',
#                                        reply_markup=approve_keyboard("–î–∞", "–ù–µ—Ç"))
#                 await state.set_state(CheckForm.resident)
#         else:
#             await state.clear()
#             await bot.send_message(chat_id=call.message.chat.id,
#                                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –ª–∏—Ü–∞–º –º–ª–∞–¥—à–µ üîû 18 –ª–µ—Ç!")
#
#     except Exception as e:
#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
# @user_router.callback_query(F.data.startswith('approve_'), CheckForm.resident)
# async def resident_callback(call: CallbackQuery, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#
#     –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –Ω–∞–ª–æ–≥–æ–≤–æ–º —Ä–µ–∑–∏–¥–µ–Ω—Ç—Å—Ç–≤–µ –≤ –∞–Ω–∫–µ—Ç–µ.
#     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–ª–æ–≥–æ–≤—ã–º —Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–∏, –µ–º—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é,
#     –∏–Ω–∞—á–µ –∞–Ω–∫–µ—Ç–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.
#
#     Args:
#         call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.
#
#     Returns:
#         None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
#     """
#     try:
#         await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
#         approve_inf = call.data.replace('approve_', '')
#         approve_inf = True if approve_inf == "True" else False
#         await call.message.delete()
#         if approve_inf:
#             await state.update_data(age=approve_inf)
#             async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
#                 await asyncio.sleep(2)
#                 await bot.send_message(chat_id=call.message.chat.id,
#                                        text='–û—Ç–ª–∏—á–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üëá',
#                                        reply_markup=main_kb())
#                 await state.clear()
#         else:
#             await state.clear()
#             await bot.send_message(chat_id=call.message.chat.id,
#                                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã üßë‚Äçüéì –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º–∏ —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞–º–∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.")
#
#     except Exception as e:
#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#
#
# @user_router.message(F.text, CheckForm.age)
# @user_router.message(F.text, CheckForm.resident)
# async def mistakes_handler(message: Message, state: FSMContext) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.
#
#     –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã, –≥–¥–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
#     –ë–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.
#
#     Args:
#         message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –µ–≥–æ —Ç–µ–∫—Å—Ç.
#         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã.
#
#     Returns:
#         None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫—É.
#     """
#     try:
#         await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ üëÜ")
#
#     except Exception as e:
#         # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
