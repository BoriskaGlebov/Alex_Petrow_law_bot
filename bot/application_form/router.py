import asyncio
import re
from typing import List, Optional

from aiogram import F
from aiogram.dispatcher.router import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InputMedia,
    InputMediaPhoto,
    InputMediaVideo,
    Message,
    ReplyKeyboardRemove,
)
from aiogram.utils.chat_action import ChatActionSender
from loguru import logger

from bot.admins.keyboards.inline_kb import approve_admin_keyboard
from bot.application_form.dao import ApplicationDAO, BankDebtDAO, PhotoDAO, VideoDAO
from bot.application_form.keyboards.inline_kb import owner_keyboard, can_contact_keyboard
from bot.application_form.models import Application, ApplicationStatus
from bot.application_form.schemas import (
    BankDebtModelSchema,
    PhotoModelSchema,
    VideoModelSchema,
)
from bot.config import bot, settings
from bot.database import connection
from bot.other_handler.router import OtherHandler
from bot.users.dao import UserDAO
from bot.users.keyboards.inline_kb import approve_keyboard
from bot.users.keyboards.markup_kb import main_kb, phone_kb
from bot.users.schemas import TelegramIDModel, UpdateNumberSchema
from bot.users.utils import normalize_phone_number

application_form_router = Router()


class ApplicationForm(StatesGroup):
    approve_work = State()
    owner = State()
    photo = State()
    question_asked = State()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ—Å—ã–ª–∫–µ —Ñ–æ—Ç–æ
    can_contact = State()
    text_application = State()  # –¢–ï–∫—Å—Ç –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    check_state = State()
    bank_name = State()
    total_amount = State()
    new_bank = State()
    video = State()
    approve_form = State()


# @application_form_router.message(Command('application_form'))
@application_form_router.message(F.text.contains("–í—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤"))
@connection()
async def application_form_start(
        message: Message, state: FSMContext, session, **kwargs
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞.

    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç "–í—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤".
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Raises:
        Exception: –ï—Å–ª–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –æ–Ω–∞ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –ª–æ–≥–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
    """
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞, –ø–æ–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤—Å—è –ª–æ–≥–∏–∫–∞
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ID
            user_inf = await UserDAO.find_one_or_none(
                session=session,
                filters=TelegramIDModel(telegram_id=message.from_user.id),
            )

            if user_inf and user_inf.phone_number:
                # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ
                await message.answer(
                    "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å üìù –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤?",
                    reply_markup=approve_keyboard(
                        "–î–∞", "–ù–µ—Ç"
                    ),  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
                await state.set_state(ApplicationForm.approve_work)
            else:
                # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ–≥–æ –≤–≤–µ—Å—Ç–∏
                await message.answer(
                    "–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω–µ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä "
                    "—Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—Ä—É—á–Ω—É—é:\n"
                    " - +7XXXXXXXXXX\n"
                    " - 8XXXXXXXXXX ",
                    reply_markup=phone_kb(),  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                )
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /application –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )


@application_form_router.callback_query(
    F.data.startswith("approve_"), ApplicationForm.approve_work
)
async def approve_work_callback(call: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –∑–∞—è–≤–∫–æ–π –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä—è–¥ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    Raises:
        Exception: –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        # –û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
        await call.message.delete()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        approve_inf = call.data.replace("approve_", "")
        approve_inf = True if approve_inf == "True" else False
        async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
            if approve_inf:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                await state.update_data(approve_work=approve_inf)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–µ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                await asyncio.sleep(1)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ú—ã –∑–∞–ø–æ–ª–Ω—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –æ–¥–Ω–æ–≥–æ –¥–æ–ª–∂–Ω–∏–∫–∞.",
                    reply_markup=ReplyKeyboardRemove(),
                )
                await asyncio.sleep(1)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–∏–∫–æ–≤, –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–∑ –Ω–∏—Ö –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è –∞–Ω–∫–µ—Ç–∞.",
                )
                await asyncio.sleep(1)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –≤ –∫–∞–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ üè¶ –±–∞–Ω–∫–æ–≤ –∏ —Å—á–µ—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞.",
                )
                await asyncio.sleep(1)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–í –∞–Ω–∫–µ—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Å—É–º–º—ã –≤ –∫–∞–∫–∏—Ö –±–∞–Ω–∫–∞—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.",
                )
                await asyncio.sleep(1)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –∏–ª–∏ —Å—á–µ—Ç–∞ –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?",
                    reply_markup=owner_keyboard(),
                )
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                await state.set_state(ApplicationForm.owner)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É
                await state.set_state(OtherHandler.other_question)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–ß–µ–º –±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞–º –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –ø–æ–º–æ—á—å?",
                )
                # TODO –¢—É—Ç –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —É—Å–ª—É–≥—É, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                # TODO –ù–µ –∑–∞–±—ã—Ç—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ë–î

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.callback_query(
    F.data.startswith("owner_"), ApplicationForm.owner
)
async def owner_callback(call: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, —Å –∫–∞–∫–æ–≥–æ —Å—á–µ—Ç–∞ –±—É–¥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞ (—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞).
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π.

    Raises:
        Exception: –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
            # –û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
            await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
            await call.message.delete()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
            owner_inf = call.data.replace("owner_", "")
            owner_inf = True if owner_inf == "True" else False

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await state.update_data(owner=owner_inf)

            # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if owner_inf:
                messages = [
                    "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ 2-3 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ —Ñ–æ—Ç–æ üì∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–¥—Ä–µ—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                ]
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
                await state.set_state(ApplicationForm.photo)
            else:
                messages = [
                    "–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è üì¨ —Å –≤–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–æ–º?",
                ]
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
                await state.set_state(ApplicationForm.can_contact)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞

            for message in messages:
                await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if owner_inf:
                    await bot.send_message(chat_id=call.message.chat.id, text=message)
                else:
                    await bot.send_message(
                        chat_id=call.message.chat.id,
                        text=message,
                        reply_markup=can_contact_keyboard(),
                    )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.callback_query(
    F.data.startswith("can_contact_"), ApplicationForm.can_contact
)
async def can_contact_callback(call: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
    –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–æ–≥–ª–∞—Å–∏—è.

    Args:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.

    Returns:
        None: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π.

    Raises:
        Exception: –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞, –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    try:
        # –û—Ç–≤–µ—Ç –Ω–∞ callback –∑–∞–ø—Ä–æ—Å
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)
        await call.message.delete()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        can_contact_inf = call.data.replace("can_contact_", "")
        can_contact_inf = True if can_contact_inf == "True" else False
        logger.error(can_contact_inf)
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(can_contact=can_contact_inf)
        async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
            # –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            if can_contact_inf or not can_contact_inf:
                messages = [
                    "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ 2-3 —Å—Ç—Ä–∞–Ω–∏—Ü –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏ —Ñ–æ—Ç–æ üì∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–¥—Ä–µ—Å–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                ]
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
                await state.set_state(ApplicationForm.photo)
            # else:
            #     messages = [
            #         "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
            #     ]
            #     # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            #     await call.message.answer(
            #         text="–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", reply_markup=ReplyKeyboardRemove()
            #     )
            #     # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            #     await state.clear()
            #
            for message in messages:
                # await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–≤–æ–¥ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await bot.send_message(chat_id=call.message.chat.id, text=message)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# üîí –°–ª–æ–≤–∞—Ä—å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–ø–æ user_id)
user_locks = {}


@application_form_router.message(ApplicationForm.photo, F.photo)
async def photo_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ,
    –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM, –∏ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫. –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è
    –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - message: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.Message`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    - state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (`FSMContext`), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ FSM.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if user_id not in user_locks:
        user_locks[user_id] = asyncio.Lock()

    async with user_locks[user_id]:  # üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await asyncio.sleep(0.5)  # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ

            # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
            new_photo = message.photo[-1].file_id  # üì∏ –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            logger.debug(f"–ò–∑–≤–ª–µ–∫ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ - {new_photo}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
            state_data = await state.get_data()
            existing_photos = state_data.get("photos", [])

            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
            if new_photo not in existing_photos:
                existing_photos.append(new_photo)
            else:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ —Ñ–æ—Ç–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
            await state.update_data(photos=existing_photos)
            logger.debug(f"–î–æ–±–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ FSM {(await state.get_data())['photos']}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å –æ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
            question_asked = state_data.get("question_asked", False)
            if not question_asked:
                await state.update_data(question_asked=True)
                await message.answer(
                    "–ï—â–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?",
                    reply_markup=approve_keyboard("–î–∞", "–ù–µ—Ç"),
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
            if user_id in user_locks:
                del user_locks[user_id]  # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å–∂–∞—Ç—ã—Ö —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
@application_form_router.message(
    F.document.mime_type.startswith("image/"), ApplicationForm.photo
)
@application_form_router.message(
    F.document.mime_type.startswith("image/webp"), ApplicationForm.photo
)
# TODO –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—Å–ª–∏ —Ñ–æ—Ç–∫–∞ –Ω–µ—Å–∂–∞—Ç–∞—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ webp
async def photo_uncompressed_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∂–∞—Ç—ã—Ö —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç WebP).
    –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - message: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.Message`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    - state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (`FSMContext`), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –≤ FSM –∏–ª–∏ –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if user_id not in user_locks:
        user_locks[user_id] = asyncio.Lock()

    async with user_locks[user_id]:  # üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await asyncio.sleep(0.5)  # ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ

            # –ü–æ–ª—É—á–∞–µ–º photo_id –¥–ª—è –Ω–µ—Å–∂–∞—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            new_photo = message.document.file_id
            logger.debug(f"–ò–∑–≤–ª–µ–∫ ID –Ω–µ—Å–∂–∞—Ç–æ–≥–æ —Ñ–æ—Ç–æ - {new_photo}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
            state_data = await state.get_data()
            existing_photos = state_data.get("photos", [])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–æ—Ç–æ
            if new_photo not in existing_photos:
                existing_photos.append(new_photo)
            else:
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –Ω–µ—Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            await state.update_data(photos=existing_photos)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
            question_asked = state_data.get("question_asked", False)
            if not question_asked:
                await state.update_data(question_asked=True)
                await message.answer(
                    "–ï—â–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å?",
                    reply_markup=approve_keyboard("–î–∞", "–ù–µ—Ç"),
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ—Å–∂–∞—Ç–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        finally:
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if user_id in user_locks:
                del user_locks[user_id]  # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
@application_form_router.message(
    F.document | F.video | F.audio | F.voice, ApplicationForm.photo
)
async def photo_mistakes(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞—é—Ç—Å—è —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–Ω –Ω–µ —Ñ–æ—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç),
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—à–∏–±–∫–∞ —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º MIME —Ç–∏–ø —Ñ–∞–π–ª–∞
        mime_type = (
            message.document.mime_type
            if hasattr(message, "document")
            else "–ù–µ –¥–æ–∫—É–º–µ–Ω—Ç"
        )
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Å MIME —Ç–∏–ø–æ–º: {mime_type}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if hasattr(message, "document"):  # –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç
            mime_type = message.document.mime_type
            if mime_type not in ["image/jpeg", "image/png", "image/gif", "image/webp"]:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç!")
                await state.set_state(ApplicationForm.photo)
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ—Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ
                await photo_uncompressed_message(message, state)
        elif hasattr(message, "video"):  # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ –≤–∏–¥–µ–æ!")
            await state.set_state(ApplicationForm.photo)
        elif hasattr(message, "audio"):  # –ï—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ –∞—É–¥–∏–æ!")
            await state.set_state(ApplicationForm.photo)
        elif hasattr(message, "voice"):  # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
            )
            await state.set_state(ApplicationForm.photo)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


@application_form_router.callback_query(
    F.data.startswith("approve_"), ApplicationForm.photo
)
async def photo_callback(call: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –µ—â–µ —Ñ–æ—Ç–æ (–ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–æ–∫ –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ).
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ (–î–∞/–ù–µ—Ç) –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - call: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.CallbackQuery`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback-–∑–∞–ø—Ä–æ—Å–µ, –≤–∫–ª—é—á–∞—è –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É.
    - state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (`FSMContext`), –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ –≤—ã–±–æ—Ä–∞ (–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É).
    """
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
        photo_inf = call.data.replace("approve_", "")
        photo_inf = True if photo_inf == "True" else False

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await call.message.delete()
        async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
            if photo_inf:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ñ–æ—Ç–æ
                await state.update_data(question_asked=False)
                await bot.send_message(
                    chat_id=call.message.chat.id, text="–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ üëá"
                )
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
                await state.set_state(ApplicationForm.bank_name)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –±–∞–Ω–∫ üè¶, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏–µ.",
                )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.message(F.text, ApplicationForm.bank_name)
async def bank_get_inf(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–Ω–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞. –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
    –≤ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM, –∞ –∑–∞—Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –æ —Å—É–º–º–µ, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π
    –≤ —ç—Ç–æ–º –±–∞–Ω–∫–µ.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞).
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∞–Ω–∫–æ–≤.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - message: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.Message`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç.
    - state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (`FSMContext`), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤.
    """
    try:
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
            bank_list = state_data.get("bank_name", [])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –≤ —Å–ø–∏—Å–æ–∫
            bank_list.append(message.text)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –±–∞–Ω–∫–æ–≤
            await state.update_data(bank_name=bank_list)

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ —ç—Ç–æ–º –±–∞–Ω–∫–µ
            await message.answer(
                "–£–∫–∞–∂–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ —ç—Ç–æ–º –±–∞–Ω–∫–µ —É –¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞."
            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É–º–º—ã
            await state.set_state(ApplicationForm.total_amount)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.message(F.text, ApplicationForm.total_amount)
async def total_amount_get_inf(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã –≤ –±–∞–Ω–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—É–º–º—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–Ω–∫–µ.
    –°—É–º–º–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Å—É–º–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM, –∞ –∑–∞—Ç–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è, –∏–º–µ—é—Ç—Å—è –ª–∏
    –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, —Å—É–º–º–∞).
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–º–º.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - message: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.Message`, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç (—Å—É–º–º—É).
    - state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (`FSMContext`), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –≤ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_input = message.text.strip()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —á–∏—Å–ª–∞ (—Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏–ª–∏ —Ü–µ–ª–æ–≥–æ)
        match = re.search(
            r"[-+]?\d*\,?\d+", user_input.replace(" ", "")
        )  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            if match:
                # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                user_input_number = match.group().replace(",", ".")

                try:
                    total_amount = float(user_input_number)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –±–æ–ª—å—à–µ –Ω—É–ª—è
                    if total_amount <= 0:
                        raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")

                except ValueError:
                    await message.answer(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–±–æ–ª—å—à–µ –Ω—É–ª—è), –∏—Å–ø–æ–ª—å–∑—É—è —á–∏—Å–ª–∞ –∏ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤."
                    )
                    return

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                state_data = await state.get_data()

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Å—É–º–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
                total_amount_list = state_data.get("total_amount", [])

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É –≤ —Å–ø–∏—Å–æ–∫
                total_amount_list.append(total_amount)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Å—É–º–º
                await state.update_data(total_amount=total_amount_list)

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, –∏–º–µ—é—Ç—Å—è –ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö
                await message.answer(
                    "–ò–º–µ—é—Ç—Å—è –ª–∏ —É –¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–ø–∏—Å–∞—Ç—å, –≤ –¥—Ä—É–≥–∏—Ö –±–∞–Ω–∫–∞—Ö?",
                    reply_markup=approve_keyboard("–î–∞", "–ù–µ—Ç"),
                )

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –±–∞–Ω–∫–µ
                await state.set_state(ApplicationForm.new_bank)
            else:
                await message.answer(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å —á–∏—Å–ª–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: '1000' –∏–ª–∏ '1000.50'."
                )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# TODO –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–æ –±—ã –Ω–µ –ø–ª–æ—Ö–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
@application_form_router.callback_query(
    F.data.startswith("approve_"), ApplicationForm.new_bank
)
@connection()
async def photo_callback_final(call: CallbackQuery, state: FSMContext, session) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∫–∞.

    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞–¥–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞ (–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–∫–∞).

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
    - call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.

    –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:
    - call: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `aiogram.types.CallbackQuery`, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callback-–∑–∞–ø—Ä–æ—Å–µ, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ (–∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞—é—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–Ω–∫).
    - state: –û–±—ä–µ–∫—Ç —Ç–∏–ø–∞ `FSMContext`, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    - –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.
    """
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback-–∑–∞–ø—Ä–æ—Å–∞
        new_bank_inf = call.data.replace("approve_", "")
        new_bank_inf = True if new_bank_inf == "True" else False

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        await call.message.delete()
        async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
            if new_bank_inf:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –±–∞–Ω–∫, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å –±–∞–Ω–∫
                await state.update_data(new_bank=True)

                await asyncio.sleep(2)
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –±–∞–Ω–∫ üè¶, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏–µ.",
                )
                await state.set_state(ApplicationForm.bank_name)
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–Ω–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É –≤–∏–¥–µ–æ
                await state.update_data(new_bank=False)
                await state.update_data(check_state=ApplicationStatus.PENDING.value)

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM
                user_data = await state.get_data()  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: dict
                user_id: int = call.from_user.id  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: int

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                user_info = await UserDAO.find_one_or_none(
                    session=session, filters=TelegramIDModel(telegram_id=user_id)
                )
                if not user_info:
                    logger.error(
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                    )
                    await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
                status: ApplicationStatus = ApplicationStatus(
                    user_data.get("check_state", "PENDING")
                )
                owner: Optional[bool] = user_data.get("owner", None)
                can_contact: Optional[bool] = user_data.get("can_contact", None)
                video_id: Optional[str] = user_data.get(
                    "video", None
                )  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[str]
                bank_name: Optional[List[str]] = user_data.get(
                    "bank_name", None
                )  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[List[str]]
                total_amount: Optional[List[float]] = user_data.get(
                    "total_amount", None
                )  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[List[float]]
                photos: List[str] = user_data.get("photos", [])  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: List[str]

                # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
                application_model = Application(
                    user_id=user_info.id, status=status, owner=owner, can_contact=can_contact
                )
                application: Application = await ApplicationDAO.add(
                    session=session, values=application_model.to_dict()
                )
                logger.debug(f"–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É - {application.id}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                for photo_id in photos:
                    photo_model = PhotoModelSchema(
                        file_id=photo_id, application_id=application.id
                    )
                    await PhotoDAO.add(session, photo_model)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                if video_id:
                    video_model = VideoModelSchema(
                        file_id=video_id, application_id=application.id
                    )
                    await VideoDAO.add(session, video_model)

                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                if bank_name and total_amount:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–∫–∏ bank_name –∏ total_amount –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
                    if len(bank_name) == len(total_amount):
                        for bank, amount in zip(bank_name, total_amount):
                            bank_debt_model = BankDebtModelSchema(
                                bank_name=bank,
                                total_amount=amount,
                                application_id=application.id,
                            )
                            await BankDebtDAO.add(session, bank_debt_model)

                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                response_message: str = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {application.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. \n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü° {application.status.value}\n\n"

                if application.owner is not None:
                    response_message += (
                        "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –î–ê\n\n"
                        if application.owner
                        else "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
                    )
                if (application.owner is not None) and application.owner is not True:
                    response_message += (
                        "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –î–ê\n\n"
                        if application.can_contact
                        else "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
                    )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
                if bank_name and total_amount:
                    response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                    for bank, amount in zip(bank_name, total_amount):
                        response_message += f"üî∏ –ë–∞–Ω–∫: <b>{bank}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{amount}</b> —Ä—É–±.\n"

                response_message += "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∞—Ç—Ç–∞—á–º–µ–Ω—Ç–æ–≤
                media: List[InputMedia] = []  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: List[InputMedia]

                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ
                for photo_id in photos:
                    media.append(InputMediaPhoto(type="photo", media=photo_id))

                # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ
                if video_id:
                    media.append(InputMediaVideo(type="video", media=video_id))

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ –±–∞–Ω–∫–∞–º–∏
                await call.message.answer_media_group(media=media)
                await call.message.answer(
                    response_message,
                    reply_markup=approve_keyboard("–î–ê", "–ù–ï–¢, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."),
                )

                await state.set_state(ApplicationForm.approve_form)

                logger.info(f"–ó–∞—è–≤–∫–∞ {application.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# @application_form_router.message(ApplicationForm.video, F.video)
# @connection()
# async def video_message(message: types.Message, session: AsyncSession, state: FSMContext):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —á–∞—Ç.
#     –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ, –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
#
#     –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
#     - message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤–∏–¥–µ–æ.
#     - session (AsyncSession): –°–µ—Å—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
#     - state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ.
#
#     –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
#     - –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –≤ FSM –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
#     """
#     try:
#         await asyncio.sleep(0.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
#
#         # –ü–æ–ª—É—á–∞–µ–º ID –≤–∏–¥–µ–æ
#         new_video: str = message.video.file_id  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: str
#         logger.debug(f"–ò–∑–≤–ª–µ–∫ ID –≤–∏–¥–µ–æ - {new_video}")
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
#         await state.update_data(video=new_video)
#         await state.update_data(check_state=ApplicationStatus.PENDING.value)
#
#         # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM
#         user_data = await state.get_data()  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: dict
#         user_id: int = message.from_user.id  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: int
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#         user_info = await UserDAO.find_one_or_none(session=session, filters=TelegramIDModel(telegram_id=user_id))
#         if not user_info:
#             logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#             await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
#             return
#
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         status: ApplicationStatus = ApplicationStatus(user_data.get("check_state", "PENDING"))
#         video_id: Optional[str] = user_data.get('video', None)  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[str]
#         bank_name: Optional[List[str]] = user_data.get('bank_name', None)  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[List[str]]
#         total_amount: Optional[List[float]] = user_data.get('total_amount', None)  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: Optional[List[float]]
#         photos: List[str] = user_data.get('photos', [])  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: List[str]
#
#         # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
#         application_model = Application(user_id=user_info.id, status=status)
#         application: Application = await ApplicationDAO.add(session=session, values=application_model.to_dict())
#         logger.debug(f"–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É - {application.id}")
#
#         # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
#         for photo_id in photos:
#             photo_model = PhotoModelSchema(file_id=photo_id, application_id=application.id)
#             await PhotoDAO.add(session, photo_model)
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#         if video_id:
#             video_model = VideoModelSchema(file_id=video_id, application_id=application.id)
#             await VideoDAO.add(session, video_model)
#
#         # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
#         if bank_name and total_amount:
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–∫–∏ bank_name –∏ total_amount –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
#             if len(bank_name) == len(total_amount):
#                 for bank, amount in zip(bank_name, total_amount):
#                     bank_debt_model = BankDebtModelSchema(
#                         bank_name=bank,
#                         total_amount=amount,
#                         application_id=application.id
#                     )
#                     await BankDebtDAO.add(session, bank_debt_model)
#
#         # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
#         response_message: str = f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ {application.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. \n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü° {application.status.value}\n\n"
#
#         # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
#         if bank_name and total_amount:
#             response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
#             for bank, amount in zip(bank_name, total_amount):
#                 response_message += f"üî∏ –ë–∞–Ω–∫: <b>{bank}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{amount}</b> —Ä—É–±.\n"
#
#         response_message += "\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?"
#
#         # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∞—Ç—Ç–∞—á–º–µ–Ω—Ç–æ–≤
#         media: List[InputMedia] = []  # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: List[InputMedia]
#
#         # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ
#         for photo_id in photos:
#             media.append(InputMediaPhoto(type='photo', media=photo_id))
#
#         # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ
#         if video_id:
#             media.append(InputMediaVideo(type='video', media=video_id))
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –∏ –±–∞–Ω–∫–∞–º–∏
#         await message.answer_media_group(media=media)
#         await message.answer(response_message, reply_markup=approve_keyboard("–î–ê", "–ù–ï–¢, –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."))
#
#         await state.set_state(ApplicationForm.approve_form)
#
#         logger.info(f"–ó–∞—è–≤–∫–∞ {application.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
#         await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.callback_query(
    F.data.startswith("approve_"), ApplicationForm.approve_form
)
@connection()
async def approve_form_callback(
        call: CallbackQuery, state: FSMContext, session
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–¥–æ–±—Ä—è—é—â–µ–≥–æ —Ñ–æ—Ä–º—É –∑–∞—è–≤–∫–∏.
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ª–∏–±–æ –æ–¥–æ–±—Ä–µ–Ω–∞, –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        call (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç Telegram.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è Finite State Machine (FSM) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å DAO.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥.
    """
    try:
        admin_message_ids = {}
        # –û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await call.answer(text="–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–æ–¥", show_alert=False)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö callback-–∑–∞–ø—Ä–æ—Å–∞
        approve_form_inf: bool = call.data.replace("approve_", "") == "True"

        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await call.message.edit_reply_markup(reply_markup=None)

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
        user_id = TelegramIDModel(telegram_id=call.from_user.id)
        user_applications = await UserDAO.find_one_or_none(
            session=session, filters=user_id
        )
        for el in user_applications.applications:
            print(el)
        if not user_applications or not user_applications.applications:
            raise ValueError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

        last_appl: Application = user_applications.applications[-1]
        print(last_appl.id)
        if approve_form_inf:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ –≤ —Ñ–æ—Ä–º–µ
            await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞
            async with ChatActionSender.typing(bot=bot, chat_id=call.message.chat.id):
                await asyncio.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞
                await bot.send_message(
                    chat_id=call.message.chat.id,
                    text="–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    reply_markup=ReplyKeyboardRemove(),
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                for admin_id in settings.ADMIN_IDS:
                    message = await bot.send_message(
                        chat_id=admin_id,
                        text=f"–ë—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ {last_appl.id}, –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞",
                        reply_markup=ReplyKeyboardRemove(),
                    )

            except Exception as e:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}"
                )
                pass

            response_message: str = f"–ó–∞—è–≤–∫–∞ ‚Ññ {last_appl.id}\n\n–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: üü° {last_appl.status.value}\n\n"
            response_message += (
                "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –î–ê\n\n"
                if last_appl.owner
                else "–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
            )
            if not last_appl.owner and last_appl.can_contact is not None:
                response_message += (
                    "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –î–ê\n\n"
                    if last_appl.can_contact
                    else "–ú–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º —Å—á–µ—Ç–∞ - –ù–µ—Ç\n\n"
                )
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if last_appl.debts:
                response_message += "–ó–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –±–∞–Ω–∫–∞–º:\n"
                for debt in last_appl.debts:
                    response_message += f"üî∏ –ë–∞–Ω–∫: <b>{debt.bank_name}</b>, –°—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏: <b>{debt.total_amount}</b> —Ä—É–±.\n"

            response_message += f"\n\n <b>{user_applications.phone_number}</b> \n\n"
            response_message += "\n\n –ë–µ—Ä–µ—Ç–µ –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É?"

            media: List[InputMedia] = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if last_appl.photos:
                for photo in last_appl.photos:
                    media.append(InputMediaPhoto(type="photo", media=photo.file_id))

            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if last_appl.videos:
                for video in last_appl.videos:
                    media.append(InputMediaVideo(type="video", media=video.file_id))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            try:
                for admin_id in settings.ADMIN_IDS:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—É (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    await bot.send_media_group(chat_id=admin_id, media=media)
                    message = await bot.send_message(
                        chat_id=admin_id,
                        text=response_message,
                        reply_markup=approve_admin_keyboard(
                            "–ë–µ—Ä–µ–º", "–û—Ç–∫–∞–∑", call.from_user.id, last_appl.id
                        ),
                    )
                    admin_message_ids[admin_id] = (
                        message.message_id
                    )  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
                await ApplicationDAO.update(
                    session=session,
                    filters={"id": last_appl.id},
                    values={"admin_message_ids": admin_message_ids},
                )
            except Exception as e:
                logger.error(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id} –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}"
                )
                pass

        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏, —É–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await state.clear()
            await ApplicationDAO.delete(session=session, filters={"id":last_appl.id})
            await bot.send_message(
                chat_id=call.message.chat.id,
                text="–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫—É",
                reply_markup=main_kb(),  # –í–æ–∑–º–æ–∂–Ω–æ, –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            )

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await call.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@application_form_router.message(
    lambda message: message.contact is not None or message.text is not None
)
@connection()
async def handle_contact(message: Message, state: FSMContext, session) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∫–Ω–æ–ø–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞, —Ç–∞–∫ –∏ –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é.

    –¢—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.
    """

    user_id = message.from_user.id

    if message.contact:  # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        phone_number = message.contact.phone_number
    else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é
        phone_number = message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
        phone_pattern = re.compile(
            r"^(\+7|8)?\d{10}$"
        )  # –†–∞–∑—Ä–µ—à–∞–µ—Ç +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
        if not phone_pattern.match(phone_number):
            await message.answer(
                "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX.",
                reply_markup=phone_kb(),
            )
            return

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä (–¥–æ–±–∞–≤–ª—è–µ–º +7, –µ—Å–ª–∏ –Ω–∞–¥–æ)
    normalized_phone = normalize_phone_number(phone_number)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    existing_user = await UserDAO.find_one_or_none(
        session=session, filters=TelegramIDModel(telegram_id=user_id)
    )

    if existing_user:
        await UserDAO.update(
            filters=TelegramIDModel(telegram_id=user_id),
            values=UpdateNumberSchema(phone_number=normalized_phone),
            session=session,
        )
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä {normalized_phone} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
            reply_markup=ReplyKeyboardRemove(),
        )

        await message.answer(
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å üìù –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤?",
            reply_markup=approve_keyboard(
                "–î–∞", "–ù–µ—Ç"
            ),  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        )
        await state.set_state(ApplicationForm.approve_work)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@application_form_router.message(F.text, ApplicationForm.approve_work)
@application_form_router.message(F.text, ApplicationForm.owner)
@application_form_router.message(F.text, ApplicationForm.photo)
@application_form_router.message(F.text, ApplicationForm.video)
@application_form_router.message(F.text, ApplicationForm.approve_form)
async def mistakes_handler(message: Message, state: FSMContext) -> None:
    """ """
    try:
        await message.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ üëÜ")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
