name: Deploy Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Выполняется только для ветки main.
    steps:
        - name: Checkout repository
          uses: actions/checkout@v4  # Клонирование репозитория

        - name: Set up SSH key
          uses: webfactory/ssh-agent@v0.5.3  # Настройка SSH-ключа
          with:
            ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Приватный ключ из секретов

        - name: Add known hosts
          run: echo "${{ secrets.SERVER_IP }} $(ssh-keyscan -H ${{ secrets.SERVER_IP }})" >> ~/.ssh/known_hosts  # Добавление сервера в known_hosts
        - name: Test SSH connection
          run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "whoami" && echo PRIVET # Проверка подключения

#        - name: .env.docker file create
#          run: |
#            echo "Creating .env.docker file"
#            echo "DB_USER=${{ secrets.DB_USER }}" >> .env.docker
#            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.docker
#            echo "DB_HOST=${{ secrets.DB_HOST_DOCKER }}" >> .env.docker
#            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.docker
#            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env.docker
#            echo "DB_TEST=${{ secrets.DB_TEST }}" >> .env.docker
#            echo "UPLOAD_DIRECTORY=${{ secrets.UPLOAD_DIRECTORY }}" >> .env.docker
#            echo "PYTHONPATH=${{ secrets.PYTHONPATH }}" >> .env.docker

        - name: Deploy to server
          run: |
            ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd production/Alex_Petrow_law_bot || exit  # Переход в директорию приложения
            git pull origin main            # Обновление кода из репозитория
            echo "Creating .env file"
            rm -f .env 
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" >> .env
            echo "ADMIN_IDS=${{ secrets.ADMIN_IDS }}" >> .env
            echo "BASE_DIR=${{ secrets.BASE_DIR }}" >> .env
            echo "REDIS_LOGIN=${{ secrets.REDIS_LOGIN }}" >> .env
            echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> .env
            echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
            echo "NUM_DB=${{ secrets.NUM_DB }}" >> .env          
            docker compose down  # Остановка текущих контейнеров (если они запущены)
            docker compose up -d --build
            EOF
